<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities;

use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\MockObject\Exception;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Models\AuditActions\AuditActions;
use Reconmap\Models\AuditActions\VulnerabilityLogActions;
use Reconmap\Repositories\VulnerabilityRepository;
use Reconmap\Services\ActivityPublisherService;

class UpdateVulnerabilityControllerTest extends TestCase
{
    /**
     * @throws Exception
     */
    public function testHappyPath()
    {
        $fakeVulnerabilityId = 49;

        $mockRequest = $this->createMock(ServerRequestInterface::class);
        $mockRequest->expects($this->exactly(2))
            ->method('getBody')
            ->willReturn(Utils::streamFor('{"summary": "foo@bar.com","is_template":1,"project_id":5}'));
        $mockRequest->expects($this->once())
            ->method('getAttribute')
            ->with('userId')
            ->willReturn(9);

        $mockVulnerabilityRepository = $this->createMock(VulnerabilityRepository::class);
        $mockVulnerabilityRepository->expects($this->once())
            ->method('updateById')
            ->with($fakeVulnerabilityId, ['summary' => 'foo@bar.com', "is_template" => 1, "project_id" => null])
            ->willReturn(true);

        $mockPublisherService = $this->createMock(ActivityPublisherService::class);
        $mockPublisherService->expects($this->once())
            ->method('publish')
            ->with(9, AuditActions::UPDATED, 'Vulnerability', ['id' => $fakeVulnerabilityId]);

        $args = ['vulnerabilityId' => $fakeVulnerabilityId];

        $controller = new UpdateVulnerabilityController($mockVulnerabilityRepository, $mockPublisherService);
        $response = $controller($mockRequest, $args);

        $this->assertEquals(\Symfony\Component\HttpFoundation\Response::HTTP_NO_CONTENT, $response->getStatusCode());
    }
}
