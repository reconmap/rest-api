<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities\Categories;

use GuzzleHttp\Psr7\Utils;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Models\AuditActions\AuditActions;
use Reconmap\Repositories\VulnerabilityCategoryRepository;
use Reconmap\Services\ActivityPublisherService;

class UpdateVulnerabilityCategoryControllerTest extends TestCase
{
    public function testHappyPath()
    {
        $fakeCategoryId = 49;

        $mockRequest = $this->createMock(ServerRequestInterface::class);
        $mockRequest->expects($this->once())
            ->method('getBody')
            ->willReturn(Utils::streamFor('{"name": "important cat"}'));
        $mockRequest->expects($this->once())
            ->method('getAttribute')
            ->with('userId')
            ->willReturn(9);

        $mockVulnerabilityRepository = $this->createMock(VulnerabilityCategoryRepository::class);
        $mockVulnerabilityRepository->expects($this->once())
            ->method('updateById')
            ->with($fakeCategoryId, ['name' => 'important cat'])
            ->willReturn(true);

        $mockPublisherService = $this->createMock(ActivityPublisherService::class);
        $mockPublisherService->expects($this->once())
            ->method('publish')
            ->with(9, AuditActions::UPDATED, 'Vulnerability Category', ['id' => $fakeCategoryId]);

        $args = ['categoryId' => $fakeCategoryId];

        $controller = new UpdateVulnerabilityCategoryController($mockVulnerabilityRepository, $mockPublisherService);
        $response = $controller($mockRequest, $args);
        $this->assertEquals(['success' => true], $response);
    }
}
