<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities\Categories;

use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Repositories\VulnerabilityCategoryRepository;

class GetVulnerabilityCategoriesControllerTest extends TestCase
{
    public function testFindWithoutChildren()
    {
        $mockCategory = ['title' => 'foo'];

        $mockRequest = $this->createMock(ServerRequestInterface::class);
        $mockRequest->expects($this->once())
            ->method('getQueryParams')
            ->willReturn(['parentsOnly' => 1]);

        $mockRepository = $this->createMock(VulnerabilityCategoryRepository::class);
        $mockRepository->expects($this->once())
            ->method('findAllWithoutChildren')
            ->willReturn([$mockCategory]);

        $controller = new GetVulnerabilityCategoriesController($mockRepository);
        $response = $controller($mockRequest);

        $this->assertEquals([$mockCategory], $response);
    }

    public function testFindAll()
    {
        $mockCategory = ['title' => 'foo'];

        $mockRequest = $this->createMock(ServerRequestInterface::class);
        $mockRequest->expects($this->once())
            ->method('getQueryParams')
            ->willReturn(['parentsOnly' => 0]);

        $mockRepository = $this->createMock(VulnerabilityCategoryRepository::class);
        $mockRepository->expects($this->once())
            ->method('findAll')
            ->willReturn([$mockCategory]);

        $controller = new GetVulnerabilityCategoriesController($mockRepository);
        $response = $controller($mockRequest);

        $this->assertEquals([$mockCategory], $response);
    }
}
