<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Ponup\SqlBuilders\SelectQueryBuilder;

class VulnerabilityStatsRepository extends MysqlRepository
{
    public function countAll(): int
    {
        $sql = <<<SQL
        SELECT COUNT(*) AS total
        FROM vulnerability
        SQL;

        $stmt = $this->mysqlServer->prepare($sql);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();
        return (int)$row['total'];
    }

    public function findCountByRisk(?int $projectId = null): array
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability', 'risk, COUNT(*) AS total');
        if (!is_null($projectId)) {
            $queryBuilder->setWhere('project_id = ' . $projectId);
        }
        $queryBuilder->setGroupBy('risk');
        $queryBuilder->setOrderBy('total DESC');
        $sql = $queryBuilder->toSql();

        $result = $this->mysqlServer->query($sql);
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function findCountByCategory(?int $projectId = null): array
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability v', 'vc.name AS category_name, COUNT(*) AS total');
        $queryBuilder->addJoin('INNER JOIN vulnerability_category vc ON (vc.id = v.category_id)');
        $queryBuilder->setWhere('vc.parent_id IS NULL');
        if (!is_null($projectId)) {
            $queryBuilder->setWhere('AND v.project_id = ' . $projectId);
        }
        $queryBuilder->setGroupBy('category_name');
        $queryBuilder->setOrderBy('total DESC');
        $sql = $queryBuilder->toSql();

        $result = $this->mysqlServer->query($sql);
        return $result->fetch_all(MYSQLI_ASSOC);
    }
}
