<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Ponup\SqlBuilders\SelectQueryBuilder;
use Reconmap\Models\VulnerabilityCategory;
use Reconmap\Repositories\SearchCriterias\VulnerabilityCategoryCriteria;
use Reconmap\Services\PaginationRequestHandler;

class VulnerabilityCategoryRepository extends MysqlRepository implements Deletable
{
    private const string TABLE_NAME = 'vulnerability_category';

    public const array UPDATABLE_COLUMNS_TYPES = [
        'parent_id' => 'i',
        'name' => 's',
        'description' => 's'
    ];

    public function findAllWithoutChildren(): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        $searchCriteria->excludeChildsCriterion();
        return $this->search($searchCriteria);
    }

    public function insert(VulnerabilityCategory $category): int
    {
        $stmt = $this->mysqlServer->prepare('INSERT INTO vulnerability_category (parent_id, name, description) VALUES (?, ?, ?)');
        $stmt->bind_param('iss', $category->parent_id, $category->name, $category->description);
        return $this->executeInsertStatement($stmt);
    }

    public function updateById(int $id, array $newColumnValues): bool
    {
        return $this->updateByTableId(self::TABLE_NAME, $id, $newColumnValues);
    }

    public function deleteById(int $id): bool
    {
        return $this->deleteByTableId(self::TABLE_NAME, $id);
    }

    public function search(VulnerabilityCategoryCriteria $searchCriteria, bool $fullSearch = false, ?PaginationRequestHandler $paginator = null, ?string $orderBy = 'id ASC'): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        if ($fullSearch) {
            $queryBuilder = $this->getSelectWithParentQueryBuilder();
        }
        return $this->searchAll($queryBuilder, $searchCriteria, $paginator, $orderBy);
    }

    protected function getBaseSelectQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability_category');
        $queryBuilder->setColumns('id, name, description, parent_id');
        return $queryBuilder;
    }

    protected function getSelectWithParentQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability_category vc');
        $queryBuilder->setColumns('vc.id, vc.name, vc.description, vc.parent_id, parent_vc.name as parent_name');
        $queryBuilder->addJoin('LEFT JOIN vulnerability_category parent_vc ON (parent_vc.id = vc.parent_id)');
        return $queryBuilder;
    }

    public function findAllChildren(int $parentId): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        $searchCriteria->addParentIdCriterion($parentId);
        return $this->search($searchCriteria);
    }

    public function findAll(): array
    {
        $searchCriteria = new VulnerabilityCategoryCriteria();
        return $this->search($searchCriteria, true);
    }

    public function findMaxSeverityForEachParentCategory(): array
    {
        $sql = <<<SQL
            SELECT vc.name, IFNULL(v.owasp_overall, 'OK') AS owasp_overall
            FROM vulnerability_category vc
            LEFT JOIN (
                SELECT MIN(vi.owasp_overall) AS owasp_overall, vci.parent_id
                FROM vulnerability vi
                LEFT JOIN vulnerability_category vci
                    ON vi.category_id = vci.id
                GROUP BY vci.parent_id
            ) AS v
            ON v.parent_id = vc.id
            WHERE vc.parent_id IS NULL
            ORDER BY vc.id;
        SQL;

        $result = $this->mysqlServer->query($sql);
        return $result->fetch_all(MYSQLI_ASSOC);
    }

    public function getStatuses(): array
    {
        $sql = <<<SQL
            SELECT
                vc.name, IFNULL(v.status, 'âœ“') as status
            FROM vulnerability_category vc
            LEFT JOIN (
                    SELECT '!' AS status, category_id
                    FROM vulnerability
                ) v
                ON vc.id = v.category_id
            ORDER BY vc.id;
        SQL;

        $result = $this->mysqlServer->query($sql);
        return $result->fetch_all(MYSQLI_ASSOC);
    }
}
