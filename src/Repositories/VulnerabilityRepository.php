<?php declare(strict_types=1);

namespace Reconmap\Repositories;

use Ponup\SqlBuilders\InsertQueryBuilder;
use Ponup\SqlBuilders\SearchCriteria;
use Ponup\SqlBuilders\SelectQueryBuilder;
use Reconmap\Models\Vulnerability;
use Reconmap\Repositories\SearchCriterias\VulnerabilitySearchCriteria;
use Reconmap\Services\PaginationRequestHandler;

class VulnerabilityRepository extends MysqlRepository
{
    private const string TABLE_NAME = 'vulnerability';

    public const array UPDATABLE_COLUMNS_TYPES = [
        'is_template' => 'i',

        'external_id' => 's',
        'project_id' => 'i',
        'target_id' => 'i',
        'category_id' => 'i',

        'summary' => 's',
        'description' => 's',
        'external_refs' => 's',

        'visibility' => 's',

        'risk' => 's',
        'proof_of_concept' => 's',
        'impact' => 's',
        'remediation' => 's',
        'remediation_complexity' => 's',
        'remediation_priority' => 's',

        'cvss_score' => 'd',
        'cvss_vector' => 's',

        'status' => 's',
        'substatus' => 's',

        'tags' => 's',

        'owasp_vector' => 's',
        'owasp_likehood' => 'd',
        'owasp_impact' => 'd',
        'owasp_overall' => 's',

        'custom_fields' => 's',
    ];

    public function getSortableColumns(): array
    {
        return ['insert_ts', 'status', 'risk', 'cvss_score', 'category_name'];
    }

    protected function getBaseSelectQueryBuilder(): SelectQueryBuilder
    {
        $queryBuilder = new SelectQueryBuilder('vulnerability v');
        $queryBuilder->setColumns('
            v.id, v.external_id, v.insert_ts, v.update_ts, v.summary, v.description, v.external_refs, v.visibility, v.proof_of_concept, v.impact, v.remediation, v.remediation_complexity, v.remediation_priority, v.risk, v.cvss_score, v.cvss_vector, v.status, v.substatus, v.tags,
            vc.parent_id AS parent_category_id, parent_vc.name AS parent_category_name, v.category_id, vc.name AS category_name,
            v.project_id, p.name AS project_name,
            v.target_id, t.name AS target_name, t.kind AS target_kind,
            v.is_template,
            v.creator_uid, u.full_name AS creator_full_name,
            v.owasp_vector, v.owasp_likehood, v.owasp_impact, v.owasp_overall,
            v.custom_fields
        ');
        $queryBuilder->addJoin('INNER JOIN user u ON (u.id = v.creator_uid)');
        $queryBuilder->addJoin('LEFT JOIN vulnerability_category vc ON (vc.id = v.category_id)');
        $queryBuilder->addJoin('LEFT JOIN vulnerability_category parent_vc ON (parent_vc.id = vc.parent_id)');
        $queryBuilder->addJoin('LEFT JOIN project p ON (p.id = v.project_id)');
        $queryBuilder->addJoin('LEFT JOIN target t ON (t.id = v.target_id)');
        $queryBuilder->setOrderBy('v.insert_ts DESC, v.summary ASC');
        return $queryBuilder;
    }

    public function insert(Vulnerability $vulnerability): int
    {
        $insertQueryBuilder = new InsertQueryBuilder(self::TABLE_NAME);
        $insertQueryBuilder->setColumns('project_id, target_id, category_id, creator_uid, is_template, summary, description, external_refs, visibility, proof_of_concept, impact, remediation, remediation_complexity, remediation_priority, risk, cvss_score, cvss_vector, tags, owasp_vector, owasp_likehood, owasp_impact, owasp_overall, custom_fields');

        $stmt = $this->mysqlServer->prepare($insertQueryBuilder->toSql());
        $stmt->bind_param('iiiiissssssssssdsssddss', $vulnerability->project_id, $vulnerability->target_id, $vulnerability->category_id, $vulnerability->creator_uid, $vulnerability->is_template, $vulnerability->summary, $vulnerability->description, $vulnerability->external_refs, $vulnerability->visibility, $vulnerability->proof_of_concept, $vulnerability->impact, $vulnerability->remediation, $vulnerability->remediation_complexity, $vulnerability->remediation_priority, $vulnerability->risk, $vulnerability->cvss_score, $vulnerability->cvss_vector, $vulnerability->tags, $vulnerability->owasp_vector, $vulnerability->owasp_likehood, $vulnerability->owasp_impact, $vulnerability->owasp_overall, $vulnerability->custom_fields);
        return $this->executeInsertStatement($stmt);
    }

    public function clone(int $templateId, int $userId): int
    {
        $projectSql = <<<SQL
        INSERT INTO vulnerability (creator_uid, category_id, is_template, summary, description, external_refs, visibility, proof_of_concept, impact, remediation, remediation_complexity, remediation_priority, risk, cvss_score, cvss_vector, tags, owasp_vector, owasp_likehood, owasp_impact, owasp_overall, custom_fields)
        SELECT ?, category_id, is_template, summary, description, external_refs, visibility, proof_of_concept, impact, remediation, remediation_complexity, remediation_priority, risk, cvss_score, cvss_vector, tags, owasp_vector, owasp_likehood, owasp_impact, owasp_overall, custom_fields FROM vulnerability WHERE id = ?
        SQL;
        $stmt = $this->mysqlServer->prepare($projectSql);
        $stmt->bind_param('ii', $userId, $templateId);
        return $this->executeInsertStatement($stmt);
    }

    public function findById(int $id): ?array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        $queryBuilder->setWhere('v.id = ?');
        $sql = $queryBuilder->toSql();
        $stmt = $this->mysqlServer->prepare($sql);
        $stmt->bind_param('i', $id);
        $stmt->execute();
        $result = $stmt->get_result();
        $vulnerability = $result->fetch_assoc();
        $stmt->close();

        return $vulnerability;
    }

    public function search(SearchCriteria $searchCriteria, ?PaginationRequestHandler $paginator = null, ?string $orderBy = 'v.insert_ts DESC'): array
    {
        $queryBuilder = $this->getBaseSelectQueryBuilder();
        return $this->searchAll($queryBuilder, $searchCriteria, $paginator, $orderBy);
    }

    public function findAll(): array
    {
        $searchCriteria = new SearchCriteria();
        return $this->search($searchCriteria);
    }

    public function findByProjectId(int $projectId): array
    {
        $searchCriteria = new VulnerabilitySearchCriteria();
        $searchCriteria->addProjectCriterion($projectId);
        return $this->search($searchCriteria);
    }

    public function updateById(int $id, array $newColumnValues): bool
    {
        return $this->updateByTableId(self::TABLE_NAME, $id, $newColumnValues);
    }

    public function deleteById(int $id): bool
    {
        return $this->deleteByTableId(self::TABLE_NAME, $id);
    }

    public function deleteByIds(array $ids): int
    {
        return $this->deleteByTableIds(self::TABLE_NAME, $ids);
    }
}
