<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Controllers\Controller;
use Reconmap\DomainObjects\Vulnerability;
use Reconmap\Models\AuditActions\AuditActions;
use Reconmap\Repositories\VulnerabilityRepository;
use Reconmap\Services\ActivityPublisherService;

class UpdateVulnerabilityController extends Controller
{
    public function __construct(private readonly VulnerabilityRepository  $repository,
                                private readonly ActivityPublisherService $activityPublisherService)
    {
    }

    public function __invoke(ServerRequestInterface $request, array $args): ResponseInterface
    {
        $vulnerabilityId = intval($args['vulnerabilityId']);

        $keysInRequest = array_keys($this->getJsonBodyDecodedAsArray($request));

        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->getJsonBodyDecodedAsClass($request, new Vulnerability(), false);

        $vulnerabilityValues = $vulnerability->toArray(array_values(array_intersect($keysInRequest, array_keys(VulnerabilityRepository::UPDATABLE_COLUMNS_TYPES))));
        if (!empty($vulnerabilityValues)) {
            $success = $this->repository->updateById($vulnerabilityId, $vulnerabilityValues);
            if (!$success) {
                return $this->createInternalServerErrorResponse();
            }

            $loggedInUserId = $request->getAttribute('userId');
            $this->auditAction($loggedInUserId, $vulnerabilityId);
        }

        return $this->createNoContentResponse();
    }

    private function auditAction(int $loggedInUserId, int $vulnerabilityId): void
    {
        $this->activityPublisherService->publish($loggedInUserId, AuditActions::UPDATED, 'Vulnerability', ['id' => $vulnerabilityId]);
    }
}
