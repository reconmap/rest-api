<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities;

use LLPhant\Chat\OllamaChat;
use LLPhant\OllamaConfig;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Controllers\Controller;
use Reconmap\Models\AuditActions\AuditActions;
use Reconmap\Models\Notification;
use Reconmap\Repositories\NotificationsRepository;
use Reconmap\Repositories\VulnerabilityRepository;
use Reconmap\Services\ActivityPublisherService;
use Reconmap\Services\ApplicationConfig;
use Reconmap\Services\RedisServer;

class GenerateVulnerabilityRemediationController extends Controller
{
    public function __construct(private readonly VulnerabilityRepository  $repository,
                                private readonly ActivityPublisherService $activityPublisherService,
                                private readonly NotificationsRepository  $notificationsRepository,
                                private readonly RedisServer              $redisServer,
                                private readonly ApplicationConfig        $config,
    )
    {
    }

    public function __invoke(ServerRequestInterface $request, array $args): ResponseInterface
    {
        $vulnerabilityId = intval($args['vulnerabilityId']);

        $appConfig = $this->config->getSettings('integrations');

        $config = new OllamaConfig();
        $config->url = $appConfig['ollama']['url'];
        $config->model = $appConfig['ollama']['model'];
        $config->stream = false;

        $vulnerability = $this->repository->findById($vulnerabilityId);

        $chat = new OllamaChat($config);
        $chat->setSystemMessage('You are a vulnerability and pentesting expert system');
        $remediation = $chat->generateText('Write instructions on how to remediate this vulnerability: ' . $vulnerability['summary']);

        $success = $this->repository->updateById($vulnerabilityId, ['remediation' => $remediation]);

        $loggedInUserId = $request->getAttribute('userId');

        $notification = new Notification();
        $notification->toUserId = $loggedInUserId;
        $notification->title = "AI job completed";
        $notification->content = "The vulnerability remediation instructions have now been generated";
        $this->notificationsRepository->insert($notification);
        $this->redisServer->lPush("notifications:queue", json_encode(['type' => 'message']));

        if ($success) {
            $this->auditAction($loggedInUserId, $vulnerabilityId);
            return $this->createNoContentResponse();
        }

        return $this->createBadRequestResponse();
    }

    private function auditAction(int $loggedInUserId, int $vulnerabilityId): void
    {
        $this->activityPublisherService->publish($loggedInUserId, AuditActions::UPDATED, 'Vulnerability', ['id' => $vulnerabilityId]);
    }
}
