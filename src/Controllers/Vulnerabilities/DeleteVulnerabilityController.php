<?php declare(strict_types=1);

namespace Reconmap\Controllers\Vulnerabilities;

use OpenApi\Attributes as OpenApi;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Reconmap\Controllers\Controller;
use Reconmap\Http\Docs\Default204NoContentResponse;
use Reconmap\Http\Docs\Default403UnauthorisedResponse;
use Reconmap\Http\Docs\InPathIdParameter;
use Reconmap\Models\AuditActions\AuditActions;
use Reconmap\Repositories\VulnerabilityRepository;
use Reconmap\Services\ActivityPublisherService;
use Reconmap\Services\Security\AuthorisationService;

#[OpenApi\Delete(path: "/vulnerabilities/{findingId}", description: "Deletes finding with the given id", security: ["bearerAuth"], tags: ["Findings"], parameters: [new InPathIdParameter("findingId")])]
#[Default204NoContentResponse]
#[Default403UnauthorisedResponse]
class DeleteVulnerabilityController extends Controller
{
    private const string ACTION = 'vulnerabilities.delete';

    public function __construct(
        private readonly AuthorisationService     $authorisationService,
        private readonly VulnerabilityRepository  $repository,
        private readonly ActivityPublisherService $activityPublisherService)
    {
    }

    public function __invoke(ServerRequestInterface $request, array $args): ResponseInterface
    {
        $role = $request->getAttribute('role');
        if (!$this->authorisationService->isRoleAllowed($role, self::ACTION)) {
            $this->logger->warning("Unauthorised action '" . self::ACTION . "' called for role '$role'");
            return $this->createForbiddenResponse();
        }

        $vulnerabilityId = (int)$args['vulnerabilityId'];

        $success = $this->repository->deleteById($vulnerabilityId);

        $userId = $request->getAttribute('userId');

        $this->auditAction($userId, $vulnerabilityId);

        return $success ? $this->createNoContentResponse() : $this->createInternalServerErrorResponse();
    }

    private function auditAction(int $loggedInUserId, int $vulnerabilityId): void
    {
        $this->activityPublisherService->publish($loggedInUserId, AuditActions::DELETED, 'Vulnerability', ['id' => $vulnerabilityId]);
    }
}
